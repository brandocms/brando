map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

map $http_referer $allowed_referer {
    default 0;
    'www.<%= application_name %>.no' 1;
    '<%= application_name %>.no' 1;
    '<%= application_name %>.diamond.twined.net' 1;
}

upstream <%= application_name %>_prod_server {
    server 127.0.0.1:8013 fail_timeout=0;
}

#
# Development server

server {
    set $cors "";
    if ($allowed_referer) {
        set $cors "true";
    }

    listen 80;

    server_name <%= application_name %>.diamond.twined.net;

    access_log /sites/prod/<%= application_name %>/log/nginx/<%= application_name %>-prod.access.log;
    error_log /sites/prod/<%= application_name %>/log/nginx/<%= application_name %>-prod.error.log;

    location / {
        try_files $uri @proxy;
    }

    location @proxy {
        include proxy_params;
        proxy_redirect off;
        proxy_pass http://<%= application_name %>_prod_server;
        # WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}

#
# Regular HTTP traffic.

server {
    listen 80;

    server_name www.<%= application_name %>.com
                www.<%= application_name %>.no
                <%= application_name %>.com
                <%= application_name %>.no;

    # Allow access to the letsencrypt ACME Challenge
    location ~ /\.well-known\/acme-challenge {
      default_type "text/plain";
      allow all;
      root /sites/prod/<%= application_name %>/acme-challenge;
    }

    # Uncomment this when the certificate has been retrieved!
    # location / {
    #     return 301 https://www.<%= application_name %>.no$request_uri;
    # }
}

server {
    set $cors "";
    if ($http_origin ~* (.*\.<%= application_name %>.no)) {
        set $cors "true";
    }

    listen 443 ssl;

    # Uncomment when certificate has been retrieved!
    # ssl_certificate /etc/letsencrypt/live/<%= application_name %>.no/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/<%= application_name %>.no/privkey.pem;
    # ssl_trusted_certificate /etc/letsencrypt/live/<%= application_name %>.no/fullchain.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    ssl_stapling on;
    ssl_stapling_verify on;

    server_name www.<%= application_name %>.no;

    access_log /sites/prod/<%= application_name %>/log/nginx/<%= application_name %>-prod.access.log;
    error_log /sites/prod/<%= application_name %>/log/nginx/<%= application_name %>-prod.error.log;

    # Allow access to the letsencrypt ACME Challenge
    location ~ /\.well-known\/acme-challenge {
      allow all;
      root /sites/prod/<%= application_name %>/acme-challenge;
    }

    location / {
        try_files $uri @proxy;
    }

    location @proxy {
        include proxy_params;
        proxy_redirect off;
        proxy_pass http://<%= application_name %>_prod_server;

        # WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
