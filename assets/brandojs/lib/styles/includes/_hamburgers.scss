@charset "UTF-8";
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x           : 15px !default;
$hamburger-padding-y           : 15px !default;
$hamburger-layer-width         : 40px !default;
$hamburger-layer-height        : 4px !default;
$hamburger-layer-spacing       : 6px !default;
$hamburger-layer-color         : #000 !default;
$hamburger-layer-border-radius : 4px !default;
$hamburger-hover-opacity       : 0.7 !default;
$hamburger-active-layer-color  : $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter   : false !default;
$hamburger-hover-filter       : opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
  3dx,
  3dx-r,
  3dy,
  3dy-r,
  3dxy,
  3dxy-r,
  arrow,
  arrow-r,
  arrowalt,
  arrowalt-r,
  arrowturn,
  arrowturn-r,
  boring,
  collapse,
  collapse-r,
  elastic,
  elastic-r,
  emphatic,
  emphatic-r,
  minus,
  slider,
  slider-r,
  spin,
  spin-r,
  spring,
  spring-r,
  stand,
  stand-r,
  squeeze,
  vortex,
  vortex-r
) !default;

// Hamburger
// ==================================================
@each $bp-name, $bp-cfg in $hamburger-config {
  @include media-breakpoint-up($bp-name) {
    .hamburger {
      padding: map-get($bp-cfg, padding-x) map-get($bp-cfg, padding-y);
      display: inline-block;
      cursor: pointer;

      transition-property: opacity, filter;
      transition-duration: 0.15s;
      transition-timing-function: linear;

      transition: background-color 1.25 ease;

      // Normalize (<button>)
      font: inherit;
      color: inherit;
      text-transform: none;
      background-color: transparent;
      border: 0;
      margin: 0;
      overflow: visible;

      &:hover {
        @if $hamburger-hover-use-filter == true {
          filter: $hamburger-hover-filter;
        }
        @else {
          opacity: $hamburger-hover-opacity;
        }
      }

      &.is-active {
        &:hover {
          @if $hamburger-hover-use-filter == true {
            filter: $hamburger-active-hover-filter;
          }
          @else {
            opacity: $hamburger-active-hover-opacity;
          }
        }

        .hamburger-inner,
        .hamburger-inner::before,
        .hamburger-inner::after {
          background-color: $hamburger-active-layer-color;
          // transition: background-color 1.25s ease;
        }
      }
    }
  }
}

@each $bp-name, $bp-cfg in $hamburger-config {
  @include media-breakpoint-up($bp-name) {
    .hamburger-box {
      width: map-get($bp-cfg, layer-width);
      height: map-get($bp-cfg, layer-height) * 3 + map-get($bp-cfg, layer-spacing) * 2;
      display: inline-block;
      position: relative;
    }

    .hamburger-inner {
      display: block;
      top: 50%;
      margin-top: map-get($bp-cfg, layer-height) / -2;

      &,
      &::before,
      &::after {
        width: map-get($bp-cfg, layer-width);
        height: map-get($bp-cfg, layer-height);
        background-color: map-get($bp-cfg, layer-color);
        border-radius: map-get($bp-cfg, layer-radius);
        position: absolute;
        transition: transform 0.15s ease;
      }

      &::before,
      &::after {
        content: "";
        display: block;
      }

      &::before {
        top: (map-get($bp-cfg, layer-spacing) + map-get($bp-cfg, layer-height)) * -1;
      }

      &::after {
        bottom: (map-get($bp-cfg, layer-spacing) + map-get($bp-cfg, layer-height)) * -1;
      }
    }
  }
}


// Hamburger types
// ==================================================
@import "hamburger_spin";

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }